openapi: '3.0.0'
info:
  version: 1.0.0
  title: SmartAssets
servers:
  - url: /api
paths:
  /:
    get:
      description: API home page
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
  /assets:
    get:
      description: Retrieve all assets
      parameters:
        - name: name
          in: query
          required: false
          schema:
            type: string
        - name: id
          in: query
          required: false
          schema:
            type: number
        - name: quantity
          in: query
          required: false
          schema:
            type: string
        - name: serial
          in: query
          required: false
          schema:
            type: string
        - name: sort
          in: query
          required: false
          schema:
            type: string
        - name: limit
          in: query
          required: false
          schema:
            type: number
        - name: skip
          in: query
          required: false
          schema:
            type: number
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
    post:
      description: Create a new asset.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
             $ref: '#/components/schemas/NewAsset'
          application/json:
            schema:
             $ref: '#/components/schemas/NewAsset'
      responses:
        '200':
          description: Asset created successfully
          content:
            application/json:
              schema:
                type: object
    delete:
      description: Delete all assets
      responses:
        '200':
          description: Assets deleted successfully
          content:
            application/json:
              schema:
                type: object
  /assets/search:
    get:
      description: Search for assets
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
        - name: limit
          in: query
          required: false
          schema:
            type: number
        - name: skip
          in: query
          required: false
          schema:
            type: number
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
  /assets/nativesearch:
    get:
      description: Search for assets
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
        - name: limit
          in: query
          required: false
          schema:
            type: number
        - name: skip
          in: query
          required: false
          schema:
            type: number
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
  /company:
    get:
      description: Retrieve all companies
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
  /company/{id}:
    delete:
      description: Delete company with specified ID.
      responses:
        '200':
          description: Company deleted successfully
          content:
            application/json:
              schema:
                type: object
  /location:
    get:
      description: Retrieve all locations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
  /location/{id}:
    delete:
      description: Delete location with specified ID.
      responses:
        '200':
          description: Location deleted successfully
          content:
            application/json:
              schema:
                type: object
  /manufacturer:
    get:
      description: Retrieve all manufacturers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
  /manufacturer/{id}:
    delete:
      description: Delete manufacturer with specified ID.
      responses:
        '200':
          description: Manufacturer deleted successfully
          content:
            application/json:
              schema:
                type: object
  /model:
    get:
      description: Retrieve all models
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
  /model/{id}:
    delete:
      description: Delete model with specified ID.
      responses:
        '200':
          description: Model deleted successfully
          content:
            application/json:
              schema:
                type: object
  /supplier:
    get:
      description: Retrieve all suppliers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
  /supplier/{id}:
    delete:
      description: Delete supplier with specified ID.
      responses:
        '200':
          description: Supplier deleted successfully
          content:
            application/json:
              schema:
                type: object
  /tags:
    get:
      description: Retrieve all tags
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
  /tags/{id}:
    delete:
      description: Delete tag with specified ID.
      responses:
        '200':
          description: Tag deleted successfully
          content:
            application/json:
              schema:
                type: object
  /type:
    get:
      description: Retrieve all types
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
  /type/{id}:
    delete:
      description: Delete type with specified ID.
      responses:
        '200':
          description: Type deleted successfully
          content:
            application/json:
              schema:
                type: object
  /assets/{id}:
    get:
      description: Retrieve asset with specified ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
    put:
      description: Update asset with specified ID.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
             $ref: '#/components/schemas/Asset'
          application/json:
            schema:
             $ref: '#/components/schemas/Asset'
      responses:
        '200':
          description: Asset updated successfully
          content:
            application/json:
              schema:
                type: object
    delete:
      description: Delete asset with specified ID.
      responses:
        '200':
          description: Asset deleted successfully
          content:
            application/json:
              schema:
                type: object
  /users:
    get:
      description: Retrieve all users
      parameters:
        - name: username
          in: query
          required: false
          schema:
            type: string
        - name: email
          in: query
          required: false
          schema:
            type: string
        - name: phone
          in: query
          required: false
          schema:
            type: string
        - name: name
          in: query
          required: false
          schema:
            type: string
        - name: location
          in: query
          required: false
          schema:
            type: string
        - name: title
          in: query
          required: false
          schema:
            type: string
        - name: sort
          in: query
          required: false
          schema:
            type: string
        - name: limit
          in: query
          required: false
          schema:
            type: number
        - name: skip
          in: query
          required: false
          schema:
            type: number
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
  /users/{id}:
    get:
      description: Retrieve user with specified ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
    put:
      description: Update user with specified ID.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
             $ref: '#/components/schemas/User'
          application/json:
            schema:
             $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
    delete:
      description: Delete user with specified ID.
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
  /users/token:
    post:
      description: Check token validity.
      security: []  
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
             $ref: '#/components/schemas/Token'
          application/json:
            schema:
             $ref: '#/components/schemas/Token'
      responses:
        '200':
          description: Token Valid
          content:
            application/json:
              schema:
                type: object
  /users/signin:
    post:
      description: Create a new user.
      security: []  
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
             $ref: '#/components/schemas/Login'
          application/json:
            schema:
             $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
  /users/signup:
    post:
      description: Create a new user.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
             $ref: '#/components/schemas/SignUp'
          application/json:
            schema:
             $ref: '#/components/schemas/SignUp'
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object


components:
  schemas:
    Asset:
      properties:
        name:
          type: string
        description:
          type: string
        published:
          type: boolean
    NewAsset:
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string
        published:
          type: boolean
    Token:
      required:
        - token
        - refresh
      properties:
        token:
          type: string
        refresh:
          type: string
    Login:
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
    SignUp:
      required:
        - username
        - email
        - password
        - role
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
        role:
          type: string
        name:
          type: string
        admin:
          type: boolean
        phone:
          type: string
        location:
          type: string
        title:
          type: string
    User:
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
        role:
          type: string
        name:
          type: string
        admin:
          type: boolean
        phone:
          type: string
        location:
          type: string
        title:
          type: string
    Error:
      required:
        - success
        - code
        - errors
        - messages
        - result
      properties:
        success:
          type: boolean
        code:
          type: integer
          format: int32
        errors:
          type: array
        messages:
          type: array
        result:
          type: object
        

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
    BearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer

security:
  - ApiKeyAuth: [] 
  - BearerAuth: []
  